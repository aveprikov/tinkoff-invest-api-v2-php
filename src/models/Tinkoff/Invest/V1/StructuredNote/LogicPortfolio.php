<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: instruments.proto

namespace Tinkoff\Invest\V1\StructuredNote;

use UnexpectedValueException;

/**
 *Стратегия портфеля.
 *
 * Protobuf type <code>tinkoff.public.invest.api.contract.v1.StructuredNote.LogicPortfolio</code>
 */
class LogicPortfolio
{
    /**
     *Стратегия портфеля не определена.
     *
     * Generated from protobuf enum <code>LOGIC_PORTFOLIO_UNSPECIFIED = 0;</code>
     */
    const LOGIC_PORTFOLIO_UNSPECIFIED = 0;
    /**
     *Волатильность.
     *
     * Generated from protobuf enum <code>LOGIC_PORTFOLIO_VOLATILITY = 1;</code>
     */
    const LOGIC_PORTFOLIO_VOLATILITY = 1;
    /**
     *Корреляция.
     *
     * Generated from protobuf enum <code>LOGIC_PORTFOLIO_CORRELATION = 2;</code>
     */
    const LOGIC_PORTFOLIO_CORRELATION = 2;

    private static $valueToName = [
        self::LOGIC_PORTFOLIO_UNSPECIFIED => 'LOGIC_PORTFOLIO_UNSPECIFIED',
        self::LOGIC_PORTFOLIO_VOLATILITY => 'LOGIC_PORTFOLIO_VOLATILITY',
        self::LOGIC_PORTFOLIO_CORRELATION => 'LOGIC_PORTFOLIO_CORRELATION',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(LogicPortfolio::class, \Tinkoff\Invest\V1\StructuredNote_LogicPortfolio::class);

