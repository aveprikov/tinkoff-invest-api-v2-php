<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: instruments.proto

namespace Tinkoff\Invest\V1\StructuredNote;

use UnexpectedValueException;

/**
 *Принцип наблюдений.
 *
 * Protobuf type <code>tinkoff.public.invest.api.contract.v1.StructuredNote.ObservationPrinciple</code>
 */
class ObservationPrinciple
{
    /**
     *Принцип наблюдений не определен.
     *
     * Generated from protobuf enum <code>OBSERVATION_PRINCIPLE_UNSPECIFIED = 0;</code>
     */
    const OBSERVATION_PRINCIPLE_UNSPECIFIED = 0;
    /**
     *По худшему базовому активу.
     *
     * Generated from protobuf enum <code>OBSERVATION_PRINCIPLE_WORST_BASIC_ASSET = 1;</code>
     */
    const OBSERVATION_PRINCIPLE_WORST_BASIC_ASSET = 1;
    /**
     *По лучшему базовому активу.
     *
     * Generated from protobuf enum <code>OBSERVATION_PRINCIPLE_BEST_BASIC_ASSET = 2;</code>
     */
    const OBSERVATION_PRINCIPLE_BEST_BASIC_ASSET = 2;
    /**
     *Среднее значение по базовым активам.
     *
     * Generated from protobuf enum <code>OBSERVATION_PRINCIPLE_AVERAGE_OF_BASIC_ASSETS = 3;</code>
     */
    const OBSERVATION_PRINCIPLE_AVERAGE_OF_BASIC_ASSETS = 3;
    /**
     *Динамика актива (только если у ноты один базовый актив).
     *
     * Generated from protobuf enum <code>OBSERVATION_PRINCIPLE_SINGLE_BASIC_ASSET_PERFORMANCE = 4;</code>
     */
    const OBSERVATION_PRINCIPLE_SINGLE_BASIC_ASSET_PERFORMANCE = 4;

    private static $valueToName = [
        self::OBSERVATION_PRINCIPLE_UNSPECIFIED => 'OBSERVATION_PRINCIPLE_UNSPECIFIED',
        self::OBSERVATION_PRINCIPLE_WORST_BASIC_ASSET => 'OBSERVATION_PRINCIPLE_WORST_BASIC_ASSET',
        self::OBSERVATION_PRINCIPLE_BEST_BASIC_ASSET => 'OBSERVATION_PRINCIPLE_BEST_BASIC_ASSET',
        self::OBSERVATION_PRINCIPLE_AVERAGE_OF_BASIC_ASSETS => 'OBSERVATION_PRINCIPLE_AVERAGE_OF_BASIC_ASSETS',
        self::OBSERVATION_PRINCIPLE_SINGLE_BASIC_ASSET_PERFORMANCE => 'OBSERVATION_PRINCIPLE_SINGLE_BASIC_ASSET_PERFORMANCE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ObservationPrinciple::class, \Tinkoff\Invest\V1\StructuredNote_ObservationPrinciple::class);

