<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: instruments.proto

namespace Tinkoff\Invest\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *Объект передачи информации о структурной ноте.
 *
 * Generated from protobuf message <code>tinkoff.public.invest.api.contract.v1.StructuredNote</code>
 */
class StructuredNote extends \Google\Protobuf\Internal\Message
{
    /**
     *Уникальный идентификатор инструмента.
     *
     * Generated from protobuf field <code>string uid = 1;</code>
     */
    protected $uid = '';
    /**
     *FIGI-идентификатор инструмента.
     *
     * Generated from protobuf field <code>string figi = 2;</code>
     */
    protected $figi = '';
    /**
     *Тикер инструмента.
     *
     * Generated from protobuf field <code>string ticker = 3;</code>
     */
    protected $ticker = '';
    /**
     *Класс-код (секция торгов).
     *
     * Generated from protobuf field <code>string class_code = 4;</code>
     */
    protected $class_code = '';
    /**
     *ISIN-идентификатор инструмента.
     *
     * Generated from protobuf field <code>string isin = 5;</code>
     */
    protected $isin = '';
    /**
     *Название инструмента.
     *
     * Generated from protobuf field <code>string name = 6;</code>
     */
    protected $name = '';
    /**
     *Уникальный идентификатор актива.
     *
     * Generated from protobuf field <code>string asset_uid = 7;</code>
     */
    protected $asset_uid = '';
    /**
     *Уникальный идентификатор позиции.
     *
     * Generated from protobuf field <code>string position_uid = 8;</code>
     */
    protected $position_uid = '';
    /**
     *Шаг цены.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 9;</code>
     */
    protected $min_price_increment = null;
    /**
     *Лотность инструмента.
     *
     * Generated from protobuf field <code>int32 lot = 10;</code>
     */
    protected $lot = 0;
    /**
     *Номинал.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.MoneyValue nominal = 11;</code>
     */
    protected $nominal = null;
    /**
     *Валюта расчетов.
     *
     * Generated from protobuf field <code>string currency = 12;</code>
     */
    protected $currency = '';
    /**
     *Дата погашения облигации в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp maturity_date = 13;</code>
     */
    protected $maturity_date = null;
    /**
     *Дата размещения в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp placement_date = 14;</code>
     */
    protected $placement_date = null;
    /**
     *Форма выпуска.
     *
     * Generated from protobuf field <code>string issue_kind = 15;</code>
     */
    protected $issue_kind = '';
    /**
     *Размер выпуска.
     *
     * Generated from protobuf field <code>int32 issue_size = 16;</code>
     */
    protected $issue_size = 0;
    /**
     *Плановый размер выпуска.
     *
     * Generated from protobuf field <code>int32 issue_size_plan = 17;</code>
     */
    protected $issue_size_plan = 0;
    /**
     *Ставка риска клиента по инструменту лонг.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 18;</code>
     */
    protected $dlong_client = null;
    /**
     *Ставка риска клиента по инструменту шорт.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 19;</code>
     */
    protected $dshort_client = null;
    /**
     *Признак доступности для операций в шорт.
     *
     * Generated from protobuf field <code>bool short_enabled_flag = 20;</code>
     */
    protected $short_enabled_flag = false;
    /**
     *Торговая площадка (секция биржи).
     *
     * Generated from protobuf field <code>string exchange = 21;</code>
     */
    protected $exchange = '';
    /**
     *Текущий режим торгов инструмента.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 22;</code>
     */
    protected $trading_status = 0;
    /**
     *Признак доступности торгов по бумаге через API.
     *
     * Generated from protobuf field <code>bool api_trade_available_flag = 23;</code>
     */
    protected $api_trade_available_flag = false;
    /**
     *Признак доступности для покупки.
     *
     * Generated from protobuf field <code>bool buy_available_flag = 24;</code>
     */
    protected $buy_available_flag = false;
    /**
     *Признак доступности для продажи.
     *
     * Generated from protobuf field <code>bool sell_available_flag = 25;</code>
     */
    protected $sell_available_flag = false;
    /**
     *Признак доступности выставления лимитной заявки по инструменту.
     *
     * Generated from protobuf field <code>bool limit_order_available_flag = 26;</code>
     */
    protected $limit_order_available_flag = false;
    /**
     *Признак доступности выставления рыночной заявки по инструменту.
     *
     * Generated from protobuf field <code>bool market_order_available_flag = 27;</code>
     */
    protected $market_order_available_flag = false;
    /**
     *Признак доступности выставления bestprice заявки по инструменту.
     *
     * Generated from protobuf field <code>bool bestprice_order_available_flag = 28;</code>
     */
    protected $bestprice_order_available_flag = false;
    /**
     *Флаг отображающий доступность торговли инструментом по выходным.
     *
     * Generated from protobuf field <code>bool weekend_flag = 29;</code>
     */
    protected $weekend_flag = false;
    /**
     *Флаг достаточной ликвидности.
     *
     * Generated from protobuf field <code>bool liquidity_flag = 30;</code>
     */
    protected $liquidity_flag = false;
    /**
     *Возможность покупки/продажи на ИИС.
     *
     * Generated from protobuf field <code>bool for_iis_flag = 31;</code>
     */
    protected $for_iis_flag = false;
    /**
     *Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
     *
     * Generated from protobuf field <code>bool for_qual_investor_flag = 32;</code>
     */
    protected $for_qual_investor_flag = false;
    /**
     *Признак ФИ, включенного в ломбардный список.
     *
     * Generated from protobuf field <code>bool pawnshop_list_flag = 33;</code>
     */
    protected $pawnshop_list_flag = false;
    /**
     *Реальная площадка исполнения расчётов.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 34;</code>
     */
    protected $real_exchange = 0;
    /**
     *Дата первой минутной свечи.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp first_1min_candle_date = 35;</code>
     */
    protected $first_1min_candle_date = null;
    /**
     *Дата первой дневной свечи.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp first_1day_candle_date = 36;</code>
     */
    protected $first_1day_candle_date = null;
    /**
     *Название заемщика.
     *
     * Generated from protobuf field <code>string borrow_name = 37;</code>
     */
    protected $borrow_name = '';
    /**
     *Тип структурной ноты.
     *
     * Generated from protobuf field <code>string type = 38;</code>
     */
    protected $type = '';
    /**
     *Стратегия портфеля.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.StructuredNote.LogicPortfolio logic_portfolio = 39;</code>
     */
    protected $logic_portfolio = 0;
    /**
     *Тип базового актива.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.AssetType asset_type = 40;</code>
     */
    protected $asset_type = 0;
    /**
     *Базовые активы, входящие в ноту.
     *
     * Generated from protobuf field <code>repeated .tinkoff.public.invest.api.contract.v1.StructuredNote.BasicAsset basic_assets = 41;</code>
     */
    private $basic_assets;
    /**
     *Барьер сохранности (в процентах).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation safety_barrier = 42;</code>
     */
    protected $safety_barrier = null;
    /**
     *Базис расчета НКД.
     *
     * Generated from protobuf field <code>string coupon_period_base = 43;</code>
     */
    protected $coupon_period_base = '';
    /**
     *Принцип наблюдений.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.StructuredNote.ObservationPrinciple observation_principle = 44;</code>
     */
    protected $observation_principle = 0;
    /**
     *Частота наблюдений.
     *
     * Generated from protobuf field <code>string observation_frequency = 45;</code>
     */
    protected $observation_frequency = '';
    /**
     *Дата фиксации цен базовых активов.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp initial_price_fixing_date = 46;</code>
     */
    protected $initial_price_fixing_date = null;
    /**
     *Доходность по ноте в годовом выражении.
     *
     * Generated from protobuf field <code>repeated .tinkoff.public.invest.api.contract.v1.StructuredNote.Yield yield = 47;</code>
     */
    private $yield;
    /**
     *Признак сохранения купонов.
     *
     * Generated from protobuf field <code>bool coupon_saving_flag = 48;</code>
     */
    protected $coupon_saving_flag = false;
    /**
     *Сектор экономики.
     *
     * Generated from protobuf field <code>string sector = 49;</code>
     */
    protected $sector = '';
    /**
     *Код страны рисков.
     *
     * Generated from protobuf field <code>string country_of_risk = 50;</code>
     */
    protected $country_of_risk = '';
    /**
     *Наименование страны рисков.
     *
     * Generated from protobuf field <code>string country_of_risk_name = 51;</code>
     */
    protected $country_of_risk_name = '';
    /**
     *Имя файла логотипа эмитента.
     *
     * Generated from protobuf field <code>string logo_name = 52;</code>
     */
    protected $logo_name = '';
    /**
     *Тесты, которые необходимо пройти клиенту, чтобы совершать покупки по бумаге.
     *
     * Generated from protobuf field <code>repeated string required_tests = 53;</code>
     */
    private $required_tests;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $uid
     *          Уникальный идентификатор инструмента.
     *     @type string $figi
     *          FIGI-идентификатор инструмента.
     *     @type string $ticker
     *          Тикер инструмента.
     *     @type string $class_code
     *          Класс-код (секция торгов).
     *     @type string $isin
     *          ISIN-идентификатор инструмента.
     *     @type string $name
     *          Название инструмента.
     *     @type string $asset_uid
     *          Уникальный идентификатор актива.
     *     @type string $position_uid
     *          Уникальный идентификатор позиции.
     *     @type \Tinkoff\Invest\V1\Quotation $min_price_increment
     *          Шаг цены.
     *     @type int $lot
     *          Лотность инструмента.
     *     @type \Tinkoff\Invest\V1\MoneyValue $nominal
     *          Номинал.
     *     @type string $currency
     *          Валюта расчетов.
     *     @type \Google\Protobuf\Timestamp $maturity_date
     *          Дата погашения облигации в формате UTC.
     *     @type \Google\Protobuf\Timestamp $placement_date
     *          Дата размещения в формате UTC.
     *     @type string $issue_kind
     *          Форма выпуска.
     *     @type int $issue_size
     *          Размер выпуска.
     *     @type int $issue_size_plan
     *          Плановый размер выпуска.
     *     @type \Tinkoff\Invest\V1\Quotation $dlong_client
     *          Ставка риска клиента по инструменту лонг.
     *     @type \Tinkoff\Invest\V1\Quotation $dshort_client
     *          Ставка риска клиента по инструменту шорт.
     *     @type bool $short_enabled_flag
     *          Признак доступности для операций в шорт.
     *     @type string $exchange
     *          Торговая площадка (секция биржи).
     *     @type int $trading_status
     *          Текущий режим торгов инструмента.
     *     @type bool $api_trade_available_flag
     *          Признак доступности торгов по бумаге через API.
     *     @type bool $buy_available_flag
     *          Признак доступности для покупки.
     *     @type bool $sell_available_flag
     *          Признак доступности для продажи.
     *     @type bool $limit_order_available_flag
     *          Признак доступности выставления лимитной заявки по инструменту.
     *     @type bool $market_order_available_flag
     *          Признак доступности выставления рыночной заявки по инструменту.
     *     @type bool $bestprice_order_available_flag
     *          Признак доступности выставления bestprice заявки по инструменту.
     *     @type bool $weekend_flag
     *          Флаг отображающий доступность торговли инструментом по выходным.
     *     @type bool $liquidity_flag
     *          Флаг достаточной ликвидности.
     *     @type bool $for_iis_flag
     *          Возможность покупки/продажи на ИИС.
     *     @type bool $for_qual_investor_flag
     *          Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
     *     @type bool $pawnshop_list_flag
     *          Признак ФИ, включенного в ломбардный список.
     *     @type int $real_exchange
     *          Реальная площадка исполнения расчётов.
     *     @type \Google\Protobuf\Timestamp $first_1min_candle_date
     *          Дата первой минутной свечи.
     *     @type \Google\Protobuf\Timestamp $first_1day_candle_date
     *          Дата первой дневной свечи.
     *     @type string $borrow_name
     *          Название заемщика.
     *     @type string $type
     *          Тип структурной ноты.
     *     @type int $logic_portfolio
     *          Стратегия портфеля.
     *     @type int $asset_type
     *          Тип базового актива.
     *     @type \Tinkoff\Invest\V1\StructuredNote\BasicAsset[]|\Google\Protobuf\Internal\RepeatedField $basic_assets
     *          Базовые активы, входящие в ноту.
     *     @type \Tinkoff\Invest\V1\Quotation $safety_barrier
     *          Барьер сохранности (в процентах).
     *     @type string $coupon_period_base
     *          Базис расчета НКД.
     *     @type int $observation_principle
     *          Принцип наблюдений.
     *     @type string $observation_frequency
     *          Частота наблюдений.
     *     @type \Google\Protobuf\Timestamp $initial_price_fixing_date
     *          Дата фиксации цен базовых активов.
     *     @type \Tinkoff\Invest\V1\StructuredNote\Yield[]|\Google\Protobuf\Internal\RepeatedField $yield
     *          Доходность по ноте в годовом выражении.
     *     @type bool $coupon_saving_flag
     *          Признак сохранения купонов.
     *     @type string $sector
     *          Сектор экономики.
     *     @type string $country_of_risk
     *          Код страны рисков.
     *     @type string $country_of_risk_name
     *          Наименование страны рисков.
     *     @type string $logo_name
     *          Имя файла логотипа эмитента.
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $required_tests
     *          Тесты, которые необходимо пройти клиенту, чтобы совершать покупки по бумаге.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Instruments::initOnce();
        parent::__construct($data);
    }

    /**
     *Уникальный идентификатор инструмента.
     *
     * Generated from protobuf field <code>string uid = 1;</code>
     * @return string
     */
    public function getUid()
    {
        return $this->uid;
    }

    /**
     *Уникальный идентификатор инструмента.
     *
     * Generated from protobuf field <code>string uid = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setUid($var)
    {
        GPBUtil::checkString($var, True);
        $this->uid = $var;

        return $this;
    }

    /**
     *FIGI-идентификатор инструмента.
     *
     * Generated from protobuf field <code>string figi = 2;</code>
     * @return string
     */
    public function getFigi()
    {
        return $this->figi;
    }

    /**
     *FIGI-идентификатор инструмента.
     *
     * Generated from protobuf field <code>string figi = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setFigi($var)
    {
        GPBUtil::checkString($var, True);
        $this->figi = $var;

        return $this;
    }

    /**
     *Тикер инструмента.
     *
     * Generated from protobuf field <code>string ticker = 3;</code>
     * @return string
     */
    public function getTicker()
    {
        return $this->ticker;
    }

    /**
     *Тикер инструмента.
     *
     * Generated from protobuf field <code>string ticker = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setTicker($var)
    {
        GPBUtil::checkString($var, True);
        $this->ticker = $var;

        return $this;
    }

    /**
     *Класс-код (секция торгов).
     *
     * Generated from protobuf field <code>string class_code = 4;</code>
     * @return string
     */
    public function getClassCode()
    {
        return $this->class_code;
    }

    /**
     *Класс-код (секция торгов).
     *
     * Generated from protobuf field <code>string class_code = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setClassCode($var)
    {
        GPBUtil::checkString($var, True);
        $this->class_code = $var;

        return $this;
    }

    /**
     *ISIN-идентификатор инструмента.
     *
     * Generated from protobuf field <code>string isin = 5;</code>
     * @return string
     */
    public function getIsin()
    {
        return $this->isin;
    }

    /**
     *ISIN-идентификатор инструмента.
     *
     * Generated from protobuf field <code>string isin = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setIsin($var)
    {
        GPBUtil::checkString($var, True);
        $this->isin = $var;

        return $this;
    }

    /**
     *Название инструмента.
     *
     * Generated from protobuf field <code>string name = 6;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     *Название инструмента.
     *
     * Generated from protobuf field <code>string name = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     *Уникальный идентификатор актива.
     *
     * Generated from protobuf field <code>string asset_uid = 7;</code>
     * @return string
     */
    public function getAssetUid()
    {
        return $this->asset_uid;
    }

    /**
     *Уникальный идентификатор актива.
     *
     * Generated from protobuf field <code>string asset_uid = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setAssetUid($var)
    {
        GPBUtil::checkString($var, True);
        $this->asset_uid = $var;

        return $this;
    }

    /**
     *Уникальный идентификатор позиции.
     *
     * Generated from protobuf field <code>string position_uid = 8;</code>
     * @return string
     */
    public function getPositionUid()
    {
        return $this->position_uid;
    }

    /**
     *Уникальный идентификатор позиции.
     *
     * Generated from protobuf field <code>string position_uid = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setPositionUid($var)
    {
        GPBUtil::checkString($var, True);
        $this->position_uid = $var;

        return $this;
    }

    /**
     *Шаг цены.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 9;</code>
     * @return \Tinkoff\Invest\V1\Quotation|null
     */
    public function getMinPriceIncrement()
    {
        return isset($this->min_price_increment) ? $this->min_price_increment : null;
    }

    public function hasMinPriceIncrement()
    {
        return isset($this->min_price_increment);
    }

    public function clearMinPriceIncrement()
    {
        unset($this->min_price_increment);
    }

    /**
     *Шаг цены.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 9;</code>
     * @param \Tinkoff\Invest\V1\Quotation $var
     * @return $this
     */
    public function setMinPriceIncrement($var)
    {
        GPBUtil::checkMessage($var, \Tinkoff\Invest\V1\Quotation::class);
        $this->min_price_increment = $var;

        return $this;
    }

    /**
     *Лотность инструмента.
     *
     * Generated from protobuf field <code>int32 lot = 10;</code>
     * @return int
     */
    public function getLot()
    {
        return $this->lot;
    }

    /**
     *Лотность инструмента.
     *
     * Generated from protobuf field <code>int32 lot = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setLot($var)
    {
        GPBUtil::checkInt32($var);
        $this->lot = $var;

        return $this;
    }

    /**
     *Номинал.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.MoneyValue nominal = 11;</code>
     * @return \Tinkoff\Invest\V1\MoneyValue|null
     */
    public function getNominal()
    {
        return isset($this->nominal) ? $this->nominal : null;
    }

    public function hasNominal()
    {
        return isset($this->nominal);
    }

    public function clearNominal()
    {
        unset($this->nominal);
    }

    /**
     *Номинал.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.MoneyValue nominal = 11;</code>
     * @param \Tinkoff\Invest\V1\MoneyValue $var
     * @return $this
     */
    public function setNominal($var)
    {
        GPBUtil::checkMessage($var, \Tinkoff\Invest\V1\MoneyValue::class);
        $this->nominal = $var;

        return $this;
    }

    /**
     *Валюта расчетов.
     *
     * Generated from protobuf field <code>string currency = 12;</code>
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }

    /**
     *Валюта расчетов.
     *
     * Generated from protobuf field <code>string currency = 12;</code>
     * @param string $var
     * @return $this
     */
    public function setCurrency($var)
    {
        GPBUtil::checkString($var, True);
        $this->currency = $var;

        return $this;
    }

    /**
     *Дата погашения облигации в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp maturity_date = 13;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getMaturityDate()
    {
        return isset($this->maturity_date) ? $this->maturity_date : null;
    }

    public function hasMaturityDate()
    {
        return isset($this->maturity_date);
    }

    public function clearMaturityDate()
    {
        unset($this->maturity_date);
    }

    /**
     *Дата погашения облигации в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp maturity_date = 13;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setMaturityDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->maturity_date = $var;

        return $this;
    }

    /**
     *Дата размещения в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp placement_date = 14;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getPlacementDate()
    {
        return isset($this->placement_date) ? $this->placement_date : null;
    }

    public function hasPlacementDate()
    {
        return isset($this->placement_date);
    }

    public function clearPlacementDate()
    {
        unset($this->placement_date);
    }

    /**
     *Дата размещения в формате UTC.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp placement_date = 14;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setPlacementDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->placement_date = $var;

        return $this;
    }

    /**
     *Форма выпуска.
     *
     * Generated from protobuf field <code>string issue_kind = 15;</code>
     * @return string
     */
    public function getIssueKind()
    {
        return $this->issue_kind;
    }

    /**
     *Форма выпуска.
     *
     * Generated from protobuf field <code>string issue_kind = 15;</code>
     * @param string $var
     * @return $this
     */
    public function setIssueKind($var)
    {
        GPBUtil::checkString($var, True);
        $this->issue_kind = $var;

        return $this;
    }

    /**
     *Размер выпуска.
     *
     * Generated from protobuf field <code>int32 issue_size = 16;</code>
     * @return int
     */
    public function getIssueSize()
    {
        return $this->issue_size;
    }

    /**
     *Размер выпуска.
     *
     * Generated from protobuf field <code>int32 issue_size = 16;</code>
     * @param int $var
     * @return $this
     */
    public function setIssueSize($var)
    {
        GPBUtil::checkInt32($var);
        $this->issue_size = $var;

        return $this;
    }

    /**
     *Плановый размер выпуска.
     *
     * Generated from protobuf field <code>int32 issue_size_plan = 17;</code>
     * @return int
     */
    public function getIssueSizePlan()
    {
        return $this->issue_size_plan;
    }

    /**
     *Плановый размер выпуска.
     *
     * Generated from protobuf field <code>int32 issue_size_plan = 17;</code>
     * @param int $var
     * @return $this
     */
    public function setIssueSizePlan($var)
    {
        GPBUtil::checkInt32($var);
        $this->issue_size_plan = $var;

        return $this;
    }

    /**
     *Ставка риска клиента по инструменту лонг.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 18;</code>
     * @return \Tinkoff\Invest\V1\Quotation|null
     */
    public function getDlongClient()
    {
        return isset($this->dlong_client) ? $this->dlong_client : null;
    }

    public function hasDlongClient()
    {
        return isset($this->dlong_client);
    }

    public function clearDlongClient()
    {
        unset($this->dlong_client);
    }

    /**
     *Ставка риска клиента по инструменту лонг.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 18;</code>
     * @param \Tinkoff\Invest\V1\Quotation $var
     * @return $this
     */
    public function setDlongClient($var)
    {
        GPBUtil::checkMessage($var, \Tinkoff\Invest\V1\Quotation::class);
        $this->dlong_client = $var;

        return $this;
    }

    /**
     *Ставка риска клиента по инструменту шорт.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 19;</code>
     * @return \Tinkoff\Invest\V1\Quotation|null
     */
    public function getDshortClient()
    {
        return isset($this->dshort_client) ? $this->dshort_client : null;
    }

    public function hasDshortClient()
    {
        return isset($this->dshort_client);
    }

    public function clearDshortClient()
    {
        unset($this->dshort_client);
    }

    /**
     *Ставка риска клиента по инструменту шорт.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 19;</code>
     * @param \Tinkoff\Invest\V1\Quotation $var
     * @return $this
     */
    public function setDshortClient($var)
    {
        GPBUtil::checkMessage($var, \Tinkoff\Invest\V1\Quotation::class);
        $this->dshort_client = $var;

        return $this;
    }

    /**
     *Признак доступности для операций в шорт.
     *
     * Generated from protobuf field <code>bool short_enabled_flag = 20;</code>
     * @return bool
     */
    public function getShortEnabledFlag()
    {
        return $this->short_enabled_flag;
    }

    /**
     *Признак доступности для операций в шорт.
     *
     * Generated from protobuf field <code>bool short_enabled_flag = 20;</code>
     * @param bool $var
     * @return $this
     */
    public function setShortEnabledFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->short_enabled_flag = $var;

        return $this;
    }

    /**
     *Торговая площадка (секция биржи).
     *
     * Generated from protobuf field <code>string exchange = 21;</code>
     * @return string
     */
    public function getExchange()
    {
        return $this->exchange;
    }

    /**
     *Торговая площадка (секция биржи).
     *
     * Generated from protobuf field <code>string exchange = 21;</code>
     * @param string $var
     * @return $this
     */
    public function setExchange($var)
    {
        GPBUtil::checkString($var, True);
        $this->exchange = $var;

        return $this;
    }

    /**
     *Текущий режим торгов инструмента.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 22;</code>
     * @return int
     */
    public function getTradingStatus()
    {
        return $this->trading_status;
    }

    /**
     *Текущий режим торгов инструмента.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 22;</code>
     * @param int $var
     * @return $this
     */
    public function setTradingStatus($var)
    {
        GPBUtil::checkEnum($var, \Tinkoff\Invest\V1\SecurityTradingStatus::class);
        $this->trading_status = $var;

        return $this;
    }

    /**
     *Признак доступности торгов по бумаге через API.
     *
     * Generated from protobuf field <code>bool api_trade_available_flag = 23;</code>
     * @return bool
     */
    public function getApiTradeAvailableFlag()
    {
        return $this->api_trade_available_flag;
    }

    /**
     *Признак доступности торгов по бумаге через API.
     *
     * Generated from protobuf field <code>bool api_trade_available_flag = 23;</code>
     * @param bool $var
     * @return $this
     */
    public function setApiTradeAvailableFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->api_trade_available_flag = $var;

        return $this;
    }

    /**
     *Признак доступности для покупки.
     *
     * Generated from protobuf field <code>bool buy_available_flag = 24;</code>
     * @return bool
     */
    public function getBuyAvailableFlag()
    {
        return $this->buy_available_flag;
    }

    /**
     *Признак доступности для покупки.
     *
     * Generated from protobuf field <code>bool buy_available_flag = 24;</code>
     * @param bool $var
     * @return $this
     */
    public function setBuyAvailableFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->buy_available_flag = $var;

        return $this;
    }

    /**
     *Признак доступности для продажи.
     *
     * Generated from protobuf field <code>bool sell_available_flag = 25;</code>
     * @return bool
     */
    public function getSellAvailableFlag()
    {
        return $this->sell_available_flag;
    }

    /**
     *Признак доступности для продажи.
     *
     * Generated from protobuf field <code>bool sell_available_flag = 25;</code>
     * @param bool $var
     * @return $this
     */
    public function setSellAvailableFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->sell_available_flag = $var;

        return $this;
    }

    /**
     *Признак доступности выставления лимитной заявки по инструменту.
     *
     * Generated from protobuf field <code>bool limit_order_available_flag = 26;</code>
     * @return bool
     */
    public function getLimitOrderAvailableFlag()
    {
        return $this->limit_order_available_flag;
    }

    /**
     *Признак доступности выставления лимитной заявки по инструменту.
     *
     * Generated from protobuf field <code>bool limit_order_available_flag = 26;</code>
     * @param bool $var
     * @return $this
     */
    public function setLimitOrderAvailableFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->limit_order_available_flag = $var;

        return $this;
    }

    /**
     *Признак доступности выставления рыночной заявки по инструменту.
     *
     * Generated from protobuf field <code>bool market_order_available_flag = 27;</code>
     * @return bool
     */
    public function getMarketOrderAvailableFlag()
    {
        return $this->market_order_available_flag;
    }

    /**
     *Признак доступности выставления рыночной заявки по инструменту.
     *
     * Generated from protobuf field <code>bool market_order_available_flag = 27;</code>
     * @param bool $var
     * @return $this
     */
    public function setMarketOrderAvailableFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->market_order_available_flag = $var;

        return $this;
    }

    /**
     *Признак доступности выставления bestprice заявки по инструменту.
     *
     * Generated from protobuf field <code>bool bestprice_order_available_flag = 28;</code>
     * @return bool
     */
    public function getBestpriceOrderAvailableFlag()
    {
        return $this->bestprice_order_available_flag;
    }

    /**
     *Признак доступности выставления bestprice заявки по инструменту.
     *
     * Generated from protobuf field <code>bool bestprice_order_available_flag = 28;</code>
     * @param bool $var
     * @return $this
     */
    public function setBestpriceOrderAvailableFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->bestprice_order_available_flag = $var;

        return $this;
    }

    /**
     *Флаг отображающий доступность торговли инструментом по выходным.
     *
     * Generated from protobuf field <code>bool weekend_flag = 29;</code>
     * @return bool
     */
    public function getWeekendFlag()
    {
        return $this->weekend_flag;
    }

    /**
     *Флаг отображающий доступность торговли инструментом по выходным.
     *
     * Generated from protobuf field <code>bool weekend_flag = 29;</code>
     * @param bool $var
     * @return $this
     */
    public function setWeekendFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->weekend_flag = $var;

        return $this;
    }

    /**
     *Флаг достаточной ликвидности.
     *
     * Generated from protobuf field <code>bool liquidity_flag = 30;</code>
     * @return bool
     */
    public function getLiquidityFlag()
    {
        return $this->liquidity_flag;
    }

    /**
     *Флаг достаточной ликвидности.
     *
     * Generated from protobuf field <code>bool liquidity_flag = 30;</code>
     * @param bool $var
     * @return $this
     */
    public function setLiquidityFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->liquidity_flag = $var;

        return $this;
    }

    /**
     *Возможность покупки/продажи на ИИС.
     *
     * Generated from protobuf field <code>bool for_iis_flag = 31;</code>
     * @return bool
     */
    public function getForIisFlag()
    {
        return $this->for_iis_flag;
    }

    /**
     *Возможность покупки/продажи на ИИС.
     *
     * Generated from protobuf field <code>bool for_iis_flag = 31;</code>
     * @param bool $var
     * @return $this
     */
    public function setForIisFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->for_iis_flag = $var;

        return $this;
    }

    /**
     *Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
     *
     * Generated from protobuf field <code>bool for_qual_investor_flag = 32;</code>
     * @return bool
     */
    public function getForQualInvestorFlag()
    {
        return $this->for_qual_investor_flag;
    }

    /**
     *Флаг отображающий доступность торговли инструментом только для квалифицированных инвесторов.
     *
     * Generated from protobuf field <code>bool for_qual_investor_flag = 32;</code>
     * @param bool $var
     * @return $this
     */
    public function setForQualInvestorFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->for_qual_investor_flag = $var;

        return $this;
    }

    /**
     *Признак ФИ, включенного в ломбардный список.
     *
     * Generated from protobuf field <code>bool pawnshop_list_flag = 33;</code>
     * @return bool
     */
    public function getPawnshopListFlag()
    {
        return $this->pawnshop_list_flag;
    }

    /**
     *Признак ФИ, включенного в ломбардный список.
     *
     * Generated from protobuf field <code>bool pawnshop_list_flag = 33;</code>
     * @param bool $var
     * @return $this
     */
    public function setPawnshopListFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->pawnshop_list_flag = $var;

        return $this;
    }

    /**
     *Реальная площадка исполнения расчётов.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 34;</code>
     * @return int
     */
    public function getRealExchange()
    {
        return $this->real_exchange;
    }

    /**
     *Реальная площадка исполнения расчётов.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 34;</code>
     * @param int $var
     * @return $this
     */
    public function setRealExchange($var)
    {
        GPBUtil::checkEnum($var, \Tinkoff\Invest\V1\RealExchange::class);
        $this->real_exchange = $var;

        return $this;
    }

    /**
     *Дата первой минутной свечи.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp first_1min_candle_date = 35;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getFirst1MinCandleDate()
    {
        return isset($this->first_1min_candle_date) ? $this->first_1min_candle_date : null;
    }

    public function hasFirst1MinCandleDate()
    {
        return isset($this->first_1min_candle_date);
    }

    public function clearFirst1MinCandleDate()
    {
        unset($this->first_1min_candle_date);
    }

    /**
     *Дата первой минутной свечи.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp first_1min_candle_date = 35;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setFirst1MinCandleDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->first_1min_candle_date = $var;

        return $this;
    }

    /**
     *Дата первой дневной свечи.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp first_1day_candle_date = 36;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getFirst1DayCandleDate()
    {
        return isset($this->first_1day_candle_date) ? $this->first_1day_candle_date : null;
    }

    public function hasFirst1DayCandleDate()
    {
        return isset($this->first_1day_candle_date);
    }

    public function clearFirst1DayCandleDate()
    {
        unset($this->first_1day_candle_date);
    }

    /**
     *Дата первой дневной свечи.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp first_1day_candle_date = 36;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setFirst1DayCandleDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->first_1day_candle_date = $var;

        return $this;
    }

    /**
     *Название заемщика.
     *
     * Generated from protobuf field <code>string borrow_name = 37;</code>
     * @return string
     */
    public function getBorrowName()
    {
        return $this->borrow_name;
    }

    /**
     *Название заемщика.
     *
     * Generated from protobuf field <code>string borrow_name = 37;</code>
     * @param string $var
     * @return $this
     */
    public function setBorrowName($var)
    {
        GPBUtil::checkString($var, True);
        $this->borrow_name = $var;

        return $this;
    }

    /**
     *Тип структурной ноты.
     *
     * Generated from protobuf field <code>string type = 38;</code>
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     *Тип структурной ноты.
     *
     * Generated from protobuf field <code>string type = 38;</code>
     * @param string $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkString($var, True);
        $this->type = $var;

        return $this;
    }

    /**
     *Стратегия портфеля.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.StructuredNote.LogicPortfolio logic_portfolio = 39;</code>
     * @return int
     */
    public function getLogicPortfolio()
    {
        return $this->logic_portfolio;
    }

    /**
     *Стратегия портфеля.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.StructuredNote.LogicPortfolio logic_portfolio = 39;</code>
     * @param int $var
     * @return $this
     */
    public function setLogicPortfolio($var)
    {
        GPBUtil::checkEnum($var, \Tinkoff\Invest\V1\StructuredNote\LogicPortfolio::class);
        $this->logic_portfolio = $var;

        return $this;
    }

    /**
     *Тип базового актива.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.AssetType asset_type = 40;</code>
     * @return int
     */
    public function getAssetType()
    {
        return $this->asset_type;
    }

    /**
     *Тип базового актива.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.AssetType asset_type = 40;</code>
     * @param int $var
     * @return $this
     */
    public function setAssetType($var)
    {
        GPBUtil::checkEnum($var, \Tinkoff\Invest\V1\AssetType::class);
        $this->asset_type = $var;

        return $this;
    }

    /**
     *Базовые активы, входящие в ноту.
     *
     * Generated from protobuf field <code>repeated .tinkoff.public.invest.api.contract.v1.StructuredNote.BasicAsset basic_assets = 41;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getBasicAssets()
    {
        return $this->basic_assets;
    }

    /**
     *Базовые активы, входящие в ноту.
     *
     * Generated from protobuf field <code>repeated .tinkoff.public.invest.api.contract.v1.StructuredNote.BasicAsset basic_assets = 41;</code>
     * @param \Tinkoff\Invest\V1\StructuredNote\BasicAsset[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setBasicAssets($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Tinkoff\Invest\V1\StructuredNote\BasicAsset::class);
        $this->basic_assets = $arr;

        return $this;
    }

    /**
     *Барьер сохранности (в процентах).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation safety_barrier = 42;</code>
     * @return \Tinkoff\Invest\V1\Quotation|null
     */
    public function getSafetyBarrier()
    {
        return isset($this->safety_barrier) ? $this->safety_barrier : null;
    }

    public function hasSafetyBarrier()
    {
        return isset($this->safety_barrier);
    }

    public function clearSafetyBarrier()
    {
        unset($this->safety_barrier);
    }

    /**
     *Барьер сохранности (в процентах).
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.Quotation safety_barrier = 42;</code>
     * @param \Tinkoff\Invest\V1\Quotation $var
     * @return $this
     */
    public function setSafetyBarrier($var)
    {
        GPBUtil::checkMessage($var, \Tinkoff\Invest\V1\Quotation::class);
        $this->safety_barrier = $var;

        return $this;
    }

    /**
     *Базис расчета НКД.
     *
     * Generated from protobuf field <code>string coupon_period_base = 43;</code>
     * @return string
     */
    public function getCouponPeriodBase()
    {
        return $this->coupon_period_base;
    }

    /**
     *Базис расчета НКД.
     *
     * Generated from protobuf field <code>string coupon_period_base = 43;</code>
     * @param string $var
     * @return $this
     */
    public function setCouponPeriodBase($var)
    {
        GPBUtil::checkString($var, True);
        $this->coupon_period_base = $var;

        return $this;
    }

    /**
     *Принцип наблюдений.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.StructuredNote.ObservationPrinciple observation_principle = 44;</code>
     * @return int
     */
    public function getObservationPrinciple()
    {
        return $this->observation_principle;
    }

    /**
     *Принцип наблюдений.
     *
     * Generated from protobuf field <code>.tinkoff.public.invest.api.contract.v1.StructuredNote.ObservationPrinciple observation_principle = 44;</code>
     * @param int $var
     * @return $this
     */
    public function setObservationPrinciple($var)
    {
        GPBUtil::checkEnum($var, \Tinkoff\Invest\V1\StructuredNote\ObservationPrinciple::class);
        $this->observation_principle = $var;

        return $this;
    }

    /**
     *Частота наблюдений.
     *
     * Generated from protobuf field <code>string observation_frequency = 45;</code>
     * @return string
     */
    public function getObservationFrequency()
    {
        return $this->observation_frequency;
    }

    /**
     *Частота наблюдений.
     *
     * Generated from protobuf field <code>string observation_frequency = 45;</code>
     * @param string $var
     * @return $this
     */
    public function setObservationFrequency($var)
    {
        GPBUtil::checkString($var, True);
        $this->observation_frequency = $var;

        return $this;
    }

    /**
     *Дата фиксации цен базовых активов.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp initial_price_fixing_date = 46;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getInitialPriceFixingDate()
    {
        return isset($this->initial_price_fixing_date) ? $this->initial_price_fixing_date : null;
    }

    public function hasInitialPriceFixingDate()
    {
        return isset($this->initial_price_fixing_date);
    }

    public function clearInitialPriceFixingDate()
    {
        unset($this->initial_price_fixing_date);
    }

    /**
     *Дата фиксации цен базовых активов.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp initial_price_fixing_date = 46;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setInitialPriceFixingDate($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->initial_price_fixing_date = $var;

        return $this;
    }

    /**
     *Доходность по ноте в годовом выражении.
     *
     * Generated from protobuf field <code>repeated .tinkoff.public.invest.api.contract.v1.StructuredNote.Yield yield = 47;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getYield()
    {
        return $this->yield;
    }

    /**
     *Доходность по ноте в годовом выражении.
     *
     * Generated from protobuf field <code>repeated .tinkoff.public.invest.api.contract.v1.StructuredNote.Yield yield = 47;</code>
     * @param \Tinkoff\Invest\V1\StructuredNote\Yield[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setYield($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Tinkoff\Invest\V1\StructuredNote\Yield::class);
        $this->yield = $arr;

        return $this;
    }

    /**
     *Признак сохранения купонов.
     *
     * Generated from protobuf field <code>bool coupon_saving_flag = 48;</code>
     * @return bool
     */
    public function getCouponSavingFlag()
    {
        return $this->coupon_saving_flag;
    }

    /**
     *Признак сохранения купонов.
     *
     * Generated from protobuf field <code>bool coupon_saving_flag = 48;</code>
     * @param bool $var
     * @return $this
     */
    public function setCouponSavingFlag($var)
    {
        GPBUtil::checkBool($var);
        $this->coupon_saving_flag = $var;

        return $this;
    }

    /**
     *Сектор экономики.
     *
     * Generated from protobuf field <code>string sector = 49;</code>
     * @return string
     */
    public function getSector()
    {
        return $this->sector;
    }

    /**
     *Сектор экономики.
     *
     * Generated from protobuf field <code>string sector = 49;</code>
     * @param string $var
     * @return $this
     */
    public function setSector($var)
    {
        GPBUtil::checkString($var, True);
        $this->sector = $var;

        return $this;
    }

    /**
     *Код страны рисков.
     *
     * Generated from protobuf field <code>string country_of_risk = 50;</code>
     * @return string
     */
    public function getCountryOfRisk()
    {
        return $this->country_of_risk;
    }

    /**
     *Код страны рисков.
     *
     * Generated from protobuf field <code>string country_of_risk = 50;</code>
     * @param string $var
     * @return $this
     */
    public function setCountryOfRisk($var)
    {
        GPBUtil::checkString($var, True);
        $this->country_of_risk = $var;

        return $this;
    }

    /**
     *Наименование страны рисков.
     *
     * Generated from protobuf field <code>string country_of_risk_name = 51;</code>
     * @return string
     */
    public function getCountryOfRiskName()
    {
        return $this->country_of_risk_name;
    }

    /**
     *Наименование страны рисков.
     *
     * Generated from protobuf field <code>string country_of_risk_name = 51;</code>
     * @param string $var
     * @return $this
     */
    public function setCountryOfRiskName($var)
    {
        GPBUtil::checkString($var, True);
        $this->country_of_risk_name = $var;

        return $this;
    }

    /**
     *Имя файла логотипа эмитента.
     *
     * Generated from protobuf field <code>string logo_name = 52;</code>
     * @return string
     */
    public function getLogoName()
    {
        return $this->logo_name;
    }

    /**
     *Имя файла логотипа эмитента.
     *
     * Generated from protobuf field <code>string logo_name = 52;</code>
     * @param string $var
     * @return $this
     */
    public function setLogoName($var)
    {
        GPBUtil::checkString($var, True);
        $this->logo_name = $var;

        return $this;
    }

    /**
     *Тесты, которые необходимо пройти клиенту, чтобы совершать покупки по бумаге.
     *
     * Generated from protobuf field <code>repeated string required_tests = 53;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getRequiredTests()
    {
        return $this->required_tests;
    }

    /**
     *Тесты, которые необходимо пройти клиенту, чтобы совершать покупки по бумаге.
     *
     * Generated from protobuf field <code>repeated string required_tests = 53;</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setRequiredTests($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->required_tests = $arr;

        return $this;
    }

}

